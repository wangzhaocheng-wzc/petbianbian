const fs = require('fs');
const path = require('path');

// 创建测试图片
function createTestImage() {
  const jpegData = Buffer.from([
    0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01,
    0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43,
    0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09,
    0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
    0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20,
    0x24, 0x2E, 0x27, 0x20, 0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29,
    0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 0x39, 0x3D, 0x38, 0x32,
    0x3C, 0x2E, 0x33, 0x34, 0x32, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x01,
    0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01,
    0xFF, 0xC4, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xFF, 0xC4,
    0x00, 0x14, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDA, 0x00, 0x0C,
    0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0x8A, 0x00,
    0xFF, 0xD9
  ]);
  
  const testImagePath = path.join(__dirname, 'test-debug.jpg');
  fs.writeFileSync(testImagePath, jpegData);
  return testImagePath;
}

async function testAnalysisDebug() {
  console.log('🧪 调试分析功能...\n');
  
  try {
    // 导入AI服务
    const { AIService } = require('./dist/services/aiService');
    
    // 创建测试图片
    const testImagePath = createTestImage();
    console.log('✓ 测试图片创建成功:', testImagePath);
    console.log('文件存在:', fs.existsSync(testImagePath));
    console.log('文件大小:', fs.statSync(testImagePath).size, 'bytes');
    
    // 测试完整的AI分析流程
    console.log('\n开始完整AI分析流程...');
    
    try {
      // 1. 图片预处理
      console.log('1. 图片预处理...');
      const processedImage = await AIService.preprocessImage(testImagePath);
      console.log('✓ 预处理成功:', {
        size: processedImage.size,
        width: processedImage.width,
        height: processedImage.height,
        format: processedImage.format
      });
      
      // 2. 内容验证
      console.log('2. 内容验证...');
      const isValid = await AIService.validatePoopContent(processedImage);
      console.log('✓ 内容验证结果:', isValid);
      
      if (!isValid) {
        throw new Error('内容验证失败');
      }
      
      // 3. AI分析
      console.log('3. AI分析...');
      const analysisResult = await AIService.analyzePoopImage(processedImage);
      console.log('✓ AI分析成功:', analysisResult);
      
      // 4. 结果验证
      console.log('4. 结果验证...');
      const isValidResult = AIService.validateAnalysisResult(analysisResult);
      console.log('✓ 结果验证:', isValidResult);
      
      if (!isValidResult) {
        throw new Error('结果验证失败');
      }
      
      console.log('\n🎉 完整AI分析流程测试成功！');
      
    } catch (aiError) {
      console.error('❌ AI分析流程失败:', aiError.message);
      console.error('错误详情:', aiError);
      throw aiError;
    }
    
    // 清理
    fs.unlinkSync(testImagePath);
    console.log('✓ 测试文件清理完成');
    
  } catch (error) {
    console.error('❌ 调试测试失败:', error.message);
    console.error('完整错误:', error);
  }
}

testAnalysisDebug().catch(console.error);